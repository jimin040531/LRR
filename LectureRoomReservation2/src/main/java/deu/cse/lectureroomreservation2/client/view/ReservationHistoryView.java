/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package deu.cse.lectureroomreservation2.client.view;

import deu.cse.lectureroomreservation2.client.Client;
import deu.cse.lectureroomreservation2.common.ReserveManageRequest;
import deu.cse.lectureroomreservation2.common.ReserveManageResult;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jimin
 */
public class ReservationHistoryView extends javax.swing.JFrame {

    /**
     * Creates new form ReservationHistoryView
     */
    private final Client client;

    public ReservationHistoryView(Client client) {
        this.client = client;
        initComponents();
        setLocationRelativeTo(null);

        // ÎÇ†Ïßú ÏûÖÎ†• ÌûåÌä∏ ÏÑ§Ï†ï
        txtDate.setText("yyyy / mm / dd");
        txtDate.setForeground(Color.GRAY);

        txtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtDate.getText().equals("yyyy / mm / dd")) {
                    txtDate.setText("");
                    txtDate.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                String input = txtDate.getText().trim();
                if (input.isEmpty()) {
                    txtDate.setText("yyyy / mm / dd");
                    txtDate.setForeground(Color.GRAY);
                }
            }
        });
    }

    private List<String> readUserInfoFile() {
        List<String> lines = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/resources/UserInfo.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lines;
    }

    private String findUserRole(String userId) {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/resources/UserInfo.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3 && parts[2].trim().equals(userId)) {
                    return parts[0].trim();  // "P" ÎòêÎäî "S"
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblUserId = new javax.swing.JLabel();
        lblRoomSelect = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtUserId = new javax.swing.JTextField();
        cmbRoomSelect = new javax.swing.JComboBox<>();
        lblReservationTableTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservationHistory = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("ÎßëÏùÄ Í≥†Îîï", 1, 18)); // NOI18N
        lblTitle.setText("ÏòàÏïΩ ÎÇ¥Ïó≠ Ï°∞Ìöå");

        lblUserId.setText("ÏÇ¨Ïö©Ïûê ID :");

        lblRoomSelect.setText("Í∞ïÏùòÏã§ ÏÑ†ÌÉù :");

        lblDate.setText("ÎÇ†Ïßú ÏÑ†ÌÉù :");

        btnBack.setText("<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setText("üîç Í≤ÄÏÉâ");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIdActionPerformed(evt);
            }
        });

        cmbRoomSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ï†ÑÏ≤¥", "908", "911", "912", "913", "914", "915", "916", "918" }));
        cmbRoomSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRoomSelectActionPerformed(evt);
            }
        });

        lblReservationTableTitle.setText("ÏòàÏïΩ ÎÇ¥Ïó≠");

        tblReservationHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ÏÇ¨Ïö©Ïûê ID", "Í∞ïÏùòÏã§", "ÎÖÑ", "Ïõî", "Ïùº", "ÏãúÏûë ÏãúÍ∞Ñ", "Ï¢ÖÎ£å ÏãúÍ∞Ñ", "ÏöîÏùº"
            }
        ));
        jScrollPane1.setViewportView(tblReservationHistory);
        if (tblReservationHistory.getColumnModel().getColumnCount() > 0) {
            tblReservationHistory.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblReservationHistory.getColumnModel().getColumn(3).setPreferredWidth(40);
            tblReservationHistory.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        btnEdit.setText("‚úè ÏàòÏ†ï");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("üóë ÏÇ≠Ï†ú");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReservationTableTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(190, 190, 190)
                                .addComponent(lblTitle)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblUserId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserId)
                        .addGap(12, 12, 12)
                        .addComponent(lblRoomSelect)
                        .addGap(8, 8, 8)
                        .addComponent(cmbRoomSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(txtDate))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle)
                        .addGap(27, 27, 27)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserId)
                    .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate)
                    .addComponent(lblRoomSelect)
                    .addComponent(cmbRoomSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(lblReservationTableTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new AdminMainView("A", client).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String userId = txtUserId.getText().trim();
        String selectedRoom = cmbRoomSelect.getSelectedItem().toString();
        String room = selectedRoom.equals("Ï†ÑÏ≤¥") ? "" : selectedRoom;
        String date = txtDate.getText().trim();

// ÌûåÌä∏ Î¨∏ÏûêÏó¥ Î¨¥Ïãú
        if (date.equals("yyyy / mm / dd")) {
            date = "";
        }

// Í≥µÎ∞±ÏùÑ Ï†úÍ±∞ÌïòÍ≥† ÎÇ†Ïßú ÌòïÏãùÏùÑ Ïú†ÏßÄÌïòÎèÑÎ°ù Ï≤òÎ¶¨ (Ïòà: 2025/05/24 ‚Üí 2025 / 05 / 24)
        if (!date.isEmpty() && !date.contains("/")) {
            JOptionPane.showMessageDialog(this, "ÎÇ†Ïßú ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.\nÏòà: 2025 / 05 / 24");
            return;
        }

        try {
            // ReserveManageRequest Í∏∞Î∞ò ÏöîÏ≤≠
            ReserveManageRequest req = new ReserveManageRequest(
                    "SEARCH", userId, room, date,
                    null, null, null, null, null, null
            );
            ReserveManageResult result = client.sendReserveManageRequest(req);

            DefaultTableModel model = (DefaultTableModel) tblReservationHistory.getModel();
            model.setRowCount(0);

            if (result != null && result.isSuccess() && result.getReserveList() != null) {
                for (String[] row : result.getReserveList()) {
                    model.addRow(row);
                }
            } else {
                JOptionPane.showMessageDialog(this, "ÏùºÏπòÌïòÎäî ÏòàÏïΩ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ÏÑúÎ≤Ñ ÌÜµÏã† Ï§ë Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserIdActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int row = tblReservationHistory.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "ÏàòÏ†ïÌï† ÏòàÏïΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        String userId = tblReservationHistory.getValueAt(row, 0).toString();
        String oldRoom = tblReservationHistory.getValueAt(row, 1).toString();
        String year = tblReservationHistory.getValueAt(row, 2).toString();
        String month = tblReservationHistory.getValueAt(row, 3).toString();
        String day = tblReservationHistory.getValueAt(row, 4).toString();
        String startTime = tblReservationHistory.getValueAt(row, 5).toString();
        String endTime = tblReservationHistory.getValueAt(row, 6).toString();
        String weekDay = tblReservationHistory.getValueAt(row, 7).toString();

        String oldDateStr = String.format("%s / %s / %s / %s %s", year, month, day, startTime, endTime);
        String oldReserveInfo = String.format("%s / %s / %s", oldRoom, oldDateStr, weekDay);

        String newRoom = JOptionPane.showInputDialog(this, "ÏÉà Í∞ïÏùòÏã§ Î≤àÌò∏ ÏûÖÎ†•:", oldRoom);
        String newDate = JOptionPane.showInputDialog(this, "ÏÉà ÎÇ†Ïßú Î∞è ÏãúÍ∞Ñ ÏûÖÎ†• (Ïòà: 2025 / 06 / 05 / 09:00 09:50):", oldDateStr);
        String newWeekDay = JOptionPane.showInputDialog(this, "ÏÉà ÏöîÏùº ÏûÖÎ†•:", weekDay);

        if (newRoom == null || newDate == null || newWeekDay == null) {
            JOptionPane.showMessageDialog(this, "ÏàòÏ†ïÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.");
            return;
        }

        try {
            ReserveManageRequest req = new ReserveManageRequest(
                    "UPDATE", userId, null, null,
                    oldReserveInfo, newRoom, newDate, newWeekDay, "A", null
            );
            ReserveManageResult res = client.sendReserveManageRequest(req);
            JOptionPane.showMessageDialog(this, res.getMessage());
            if (res.isSuccess()) {
                btnSearchActionPerformed(null);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ÏÑúÎ≤Ñ Ïò§Î•ò: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void cmbRoomSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRoomSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRoomSelectActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblReservationHistory.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "ÏÇ≠Ï†úÌï† ÏòàÏïΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        String userId = tblReservationHistory.getValueAt(row, 0).toString();
        String room = tblReservationHistory.getValueAt(row, 1).toString();
        String year = tblReservationHistory.getValueAt(row, 2).toString();
        String month = tblReservationHistory.getValueAt(row, 3).toString();
        String day = tblReservationHistory.getValueAt(row, 4).toString();
        String startTime = tblReservationHistory.getValueAt(row, 5).toString();
        String endTime = tblReservationHistory.getValueAt(row, 6).toString();
        String weekDay = tblReservationHistory.getValueAt(row, 7).toString();

        String dateStr = String.format("%s / %s / %s / %s %s", year, month, day, startTime, endTime);
        String reserveInfo = String.format("%s / %s / %s", room, dateStr, weekDay);

        try {
            ReserveManageRequest req = new ReserveManageRequest(
                    "DELETE", userId, null, null,
                    null, null, null, null, null, reserveInfo
            );
            ReserveManageResult res = client.sendReserveManageRequest(req);
            JOptionPane.showMessageDialog(this, res.getMessage());
            if (res.isSuccess()) {
                btnSearchActionPerformed(null);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ÏÑúÎ≤Ñ Ïò§Î•ò: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbRoomSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblReservationTableTitle;
    private javax.swing.JLabel lblRoomSelect;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserId;
    private javax.swing.JTable tblReservationHistory;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtUserId;
    // End of variables declaration//GEN-END:variables
}
